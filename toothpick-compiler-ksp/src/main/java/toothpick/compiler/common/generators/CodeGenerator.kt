/*
 * Copyright 2019 Stephane Nicolas
 * Copyright 2019 Daniel Molinero Reguera
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package toothpick.compiler.common.generators

import com.squareup.kotlinpoet.*
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import toothpick.compiler.common.generators.targets.ParamInjectionTarget
import javax.lang.model.element.ElementKind
import javax.lang.model.element.TypeElement
import javax.lang.model.util.Types

/** Common base interface for all code generators.  */
abstract class CodeGenerator(protected val typeUtil: Types) {

    /**
     * Creates all java code.
     *
     * @return a string containing the java code generated by this [CodeGenerator].
     */
    abstract fun brewJava(): String

    protected fun ParamInjectionTarget.getInvokeScopeGetMethodWithNameCodeBlock(): CodeBlock {
        val injectionName = if (name == null) ""
        else ", \"$name\""

        checkNotNull(kind) { "The kind can't be null." }

        val scopeGetMethodName: String = when (kind) {
            ParamInjectionTarget.Kind.INSTANCE -> "getInstance"
            ParamInjectionTarget.Kind.PROVIDER -> "getProvider"
            ParamInjectionTarget.Kind.LAZY -> "getLazy"
        }

        val className: ClassName = when (kind) {
            ParamInjectionTarget.Kind.INSTANCE -> memberClass.asClassName()
            ParamInjectionTarget.Kind.PROVIDER -> kindParamClass.asClassName()
            ParamInjectionTarget.Kind.LAZY -> kindParamClass.asClassName()
        }

        return CodeBlock.builder()
            .add("\$L(\$T::class.java\$L)", scopeGetMethodName, className, injectionName)
            .build()
    }

    protected fun ParamInjectionTarget.getParamType(): TypeName {
        return when (kind) {
            ParamInjectionTarget.Kind.INSTANCE ->
                typeUtil.erasure(memberClass.asType()).asTypeName()
            else -> {
                memberClass.asClassName()
                    .parameterizedBy(
                        typeUtil.erasure(kindParamClass.asType()).asTypeName()
                    )
            }
        }
    }

    /** @return the FQN of the code generated by this [CodeGenerator].
     */
    abstract val fqcn: String?

    companion object {

        @JvmStatic
        protected val TypeElement.generatedFQNClassName: String
            get() = "$generatedPackageName.$generatedSimpleClassName"

        protected val TypeElement.generatedSimpleClassName: String
            get() {
                var currentTypeElement = this
                var result = currentTypeElement.simpleName.toString()
                // deals with inner classes
                while (currentTypeElement.enclosingElement.kind != ElementKind.PACKAGE) {
                    result = "${currentTypeElement.enclosingElement.simpleName}$$result"
                    currentTypeElement = currentTypeElement.enclosingElement as TypeElement
                }
                return result
            }

        @JvmStatic
        protected val ClassName.simpleClassName: String
            get() = simpleNames.joinToString(".")

        protected val TypeElement.generatedPackageName: String
            get() {
                // deals with inner classes
                var currentTypeElement = this
                while (currentTypeElement.enclosingElement.kind != ElementKind.PACKAGE) {
                    currentTypeElement = currentTypeElement.enclosingElement as TypeElement
                }
                return currentTypeElement.enclosingElement.toString()
            }
    }
}
